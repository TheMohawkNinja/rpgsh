#pragma once

#include <string>
#include <vector>
#include "../headers/var.h"

class Dice
{
	private:
		bool just_show_rolls = false;
		bool just_show_total = false;
		bool is_list = false;
		unsigned int count = 0;
		unsigned int total_count = 0;
		std::string dice_list = "";
		std::string Quantity_str = "";
		std::string Faces_str = "";
		std::string count_expr = "";
		std::vector<int> result_quantity;

	int get_value(std::string d, std::string value, long unsigned int start, std::string terminator, bool allow_sign, bool required);

	public:
		unsigned int	Quantity	=	0;
		unsigned int	Faces		=	0;
			 int	Modifier	=	0;
		std::string	List		=	"";

	Dice();
	Dice(const Dice& b);
	Dice(std::string dice_str);
	Dice(unsigned int _Quantity, unsigned int _Faces, int _Modifier);
	Dice(std::string dice_str, bool _just_show_rolls, bool _just_show_total, bool _is_list, std::string _count_expr, unsigned int _count);
	Dice(unsigned int _Quantity, unsigned int _Faces, int _Modifier, bool _just_show_rolls, bool _just_show_total, bool _is_list, std::string _count_expr, unsigned int _count);

	explicit operator std::string() const;
	explicit operator bool() const;
	Dice& operator = ([[maybe_unused]] const int b);
	Dice& operator = (const std::string b);
	Dice& operator = (const Var b);
	Dice& operator = (const Dice b);
	Dice& operator = ([[maybe_unused]] const Wallet b);
	Dice& operator = ([[maybe_unused]] const Currency b);
	Dice& operator = ([[maybe_unused]] const CurrencySystem b);
	Dice& operator += (const int b);
	Dice& operator += (const std::string b);
	Dice& operator += (const Var b);
	Dice& operator += (const Dice b);
	Dice& operator += ([[maybe_unused]] const Wallet b);
	Dice& operator += ([[maybe_unused]] const Currency b);
	Dice& operator += ([[maybe_unused]] const CurrencySystem b);
	Dice& operator -= (const int b);
	Dice& operator -= (const std::string b);
	Dice& operator -= (const Var b);
	Dice& operator -= (const Dice b);
	Dice& operator -= ([[maybe_unused]] const Wallet b);
	Dice& operator -= ([[maybe_unused]] const Currency b);
	Dice& operator -= ([[maybe_unused]] const CurrencySystem b);
	Dice& operator *= (const int b);
	Dice& operator *= ([[maybe_unused]] const std::string b);
	Dice& operator *= (const Var b);
	Dice& operator *= ([[maybe_unused]] const Dice b);
	Dice& operator *= ([[maybe_unused]] const Wallet b);
	Dice& operator *= ([[maybe_unused]] const Currency b);
	Dice& operator *= ([[maybe_unused]] const CurrencySystem b);
	Dice& operator /= (const int b);
	Dice& operator /= ([[maybe_unused]] const std::string b);
	Dice& operator /= (const Var b);
	Dice& operator /= ([[maybe_unused]] const Dice b);
	Dice& operator /= ([[maybe_unused]] const Wallet b);
	Dice& operator /= ([[maybe_unused]] const Currency b);
	Dice& operator /= ([[maybe_unused]] const CurrencySystem b);
	Dice& operator ^= ([[maybe_unused]] const int b);
	Dice& operator ^= ([[maybe_unused]] const std::string b);
	Dice& operator ^= (const Var b);
	Dice& operator ^= ([[maybe_unused]] const Dice b);
	Dice& operator ^= ([[maybe_unused]] const Wallet b);
	Dice& operator ^= ([[maybe_unused]] const Currency b);
	Dice& operator ^= ([[maybe_unused]] const CurrencySystem b);
	Dice& operator %= (const int b);
	Dice& operator %= ([[maybe_unused]] const std::string b);
	Dice& operator %= (const Var b);
	Dice& operator %= ([[maybe_unused]] const Dice b);
	Dice& operator %= ([[maybe_unused]] const Wallet b);
	Dice& operator %= ([[maybe_unused]] const Currency b);
	Dice& operator %= ([[maybe_unused]] const CurrencySystem b);
	Dice operator + (const int b);
	Dice operator + (const std::string b);
	Dice operator + (const Var b);
	Dice operator + (const Dice b);
	Dice operator + (const Wallet b);
	Dice operator + (const Currency b);
	Dice operator + (const CurrencySystem b);
	Dice operator - (const int b);
	Dice operator - (const std::string b);
	Dice operator - (const Var b);
	Dice operator - (const Dice b);
	Dice operator - (const Wallet b);
	Dice operator - (const Currency b);
	Dice operator - (const CurrencySystem b);
	Dice operator * (const int b);
	Dice operator * (const std::string b);
	Dice operator * (const Var b);
	Dice operator * (const Dice b);
	Dice operator * (const Wallet b);
	Dice operator * (const Currency b);
	Dice operator * (const CurrencySystem b);
	Dice operator / (const int b);
	Dice operator / (const std::string b);
	Dice operator / (const Var b);
	Dice operator / (const Dice b);
	Dice operator / (const Wallet b);
	Dice operator / (const Currency b);
	Dice operator / (const CurrencySystem b);
	Dice operator ^ (const int b);
	Dice operator ^ (const std::string b);
	Dice operator ^ (const Var b);
	Dice operator ^ (const Dice b);
	Dice operator ^ (const Wallet b);
	Dice operator ^ (const Currency b);
	Dice operator ^ (const CurrencySystem b);
	Dice operator % (const int b);
	Dice operator % (const std::string b);
	Dice operator % (const Var b);
	Dice operator % (const Dice b);
	Dice operator % (const Wallet b);
	Dice operator % (const Currency b);
	Dice operator % (const CurrencySystem b);
	bool operator == ([[maybe_unused]] const int& b) const;
	bool operator == (const std::string& b) const;
	bool operator == (const Var& b) const;
	bool operator == (const Dice& b) const;
	bool operator == ([[maybe_unused]] const Wallet& b) const;
	bool operator == ([[maybe_unused]] const Currency& b) const;
	bool operator == ([[maybe_unused]] const CurrencySystem& b) const;
	bool operator < ([[maybe_unused]] const int& b) const;
	bool operator < (const std::string& b) const;
	bool operator < (const Var& b) const;
	bool operator < (const Dice& b) const;
	bool operator < ([[maybe_unused]] const Wallet& b) const;
	bool operator < ([[maybe_unused]] const Currency& b) const;
	bool operator < ([[maybe_unused]] const CurrencySystem& b) const;
	bool operator > ([[maybe_unused]] const int& b) const;
	bool operator > (const std::string& b) const;
	bool operator > (const Var& b) const;
	bool operator > (const Dice& b) const;
	bool operator > ([[maybe_unused]] const Wallet& b) const;
	bool operator > ([[maybe_unused]] const Currency& b) const;
	bool operator > ([[maybe_unused]] const CurrencySystem& b) const;
	bool operator <= (const int& b) const;
	bool operator <= (const std::string& b) const;
	bool operator <= (const Var& b) const;
	bool operator <= (const Dice& b) const;
	bool operator <= (const Wallet& b) const;
	bool operator <= (const Currency& b) const;
	bool operator <= (const CurrencySystem& b) const;
	bool operator >= (const int& b) const;
	bool operator >= (const std::string& b) const;
	bool operator >= (const Var& b) const;
	bool operator >= (const Dice& b) const;
	bool operator >= (const Wallet& b) const;
	bool operator >= (const Currency& b) const;
	bool operator >= (const CurrencySystem& b) const;
	bool operator != (const int& b) const;
	bool operator != (const std::string& b) const;
	bool operator != (const Var& b) const;
	bool operator != (const Dice& b) const;
	bool operator != (const Wallet& b) const;
	bool operator != (const Currency& b) const;
	bool operator != (const CurrencySystem& b) const;
	bool operator && (const int b);
	bool operator && (const std::string b);
	bool operator && (const Var b);
	bool operator && (const Dice b);
	bool operator && (const Wallet b);
	bool operator && (const Currency b);
	bool operator && (const CurrencySystem b);
	bool operator || (const int b);
	bool operator || (const std::string b);
	bool operator || (const Var b);
	bool operator || (const Dice b);
	bool operator || (const Wallet b);
	bool operator || (const Currency b);
	bool operator || (const CurrencySystem b);
	Dice& operator ++ (int);
	Dice& operator -- (int);

	std::string dice() const;
	const char* c_str() const;
	void roll();
	void test();
};
