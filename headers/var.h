#pragma once

#include <string>
#include "currency.h"
#include "dice.h"

class Var
{
	public:
		std::string Value = "";

		Var(const Var& b);
		explicit operator std::string() const;
		explicit operator int() const;
		Var& operator = (const int b);
		Var& operator = (const std::string b);
		Var& operator = (const Var b);
		Var& operator = ([[maybe_unused]] const Dice b);
		Var& operator = ([[maybe_unused]] const Wallet b);
		Var& operator = ([[maybe_unused]] const Currency b);
		Var& operator = ([[maybe_unused]] const CurrencySystem b);
		Var& operator += (const int b);
		Var& operator += (const std::string b);
		Var& operator += (const Var b);
		Var& operator += ([[maybe_unused]] const Dice b);
		Var& operator += ([[maybe_unused]] const Wallet b);
		Var& operator += ([[maybe_unused]] const Currency b);
		Var& operator += ([[maybe_unused]] const CurrencySystem b);
		Var& operator -= (const int b);
		Var& operator -= ([[maybe_unused]] const std::string b);
		Var& operator -= (const Var b);
		Var& operator -= ([[maybe_unused]] const Dice b);
		Var& operator -= ([[maybe_unused]] const Wallet b);
		Var& operator -= ([[maybe_unused]] const Currency b);
		Var& operator -= ([[maybe_unused]] const CurrencySystem b);
		Var& operator *= (const int b);
		Var& operator *= ([[maybe_unused]] const std::string b);
		Var& operator *= (const Var b);
		Var& operator *= ([[maybe_unused]] const Dice b);
		Var& operator *= ([[maybe_unused]] const Wallet b);
		Var& operator *= ([[maybe_unused]] const Currency b);
		Var& operator *= ([[maybe_unused]] const CurrencySystem b);
		Var& operator /= (const int b);
		Var& operator /= ([[maybe_unused]] const std::string b);
		Var& operator /= (const Var b);
		Var& operator /= ([[maybe_unused]] const Dice b);
		Var& operator /= ([[maybe_unused]] const Wallet b);
		Var& operator /= ([[maybe_unused]] const Currency b);
		Var& operator /= ([[maybe_unused]] const CurrencySystem b);
		Var& operator ^= (const int b);
		Var& operator ^= ([[maybe_unused]] const std::string b);
		Var& operator ^= (const Var b);
		Var& operator ^= ([[maybe_unused]] const Dice b);
		Var& operator ^= ([[maybe_unused]] const Wallet b);
		Var& operator ^= ([[maybe_unused]] const Currency b);
		Var& operator ^= ([[maybe_unused]] const CurrencySystem b);
		Var& operator %= (const int b);
		Var& operator %= ([[maybe_unused]] const std::string b);
		Var& operator %= (const Var b);
		Var& operator %= ([[maybe_unused]] const Dice b);
		Var& operator %= ([[maybe_unused]] const Wallet b);
		Var& operator %= ([[maybe_unused]] const Currency b);
		Var& operator %= ([[maybe_unused]] const CurrencySystem b);
		Var operator + (const int b);
		Var operator + (const std::string b);
		Var operator + (const Var b);
		Var operator + (const Dice b);
		Var operator + (const Wallet b);
		Var operator + (const Currency b);
		Var operator + (const CurrencySystem b);
		Var operator - (const int b);
		Var operator - (const std::string b);
		Var operator - (const Var b);
		Var operator - (const Dice b);
		Var operator - (const Wallet b);
		Var operator - (const Currency b);
		Var operator - (const CurrencySystem b);
		Var operator * (const int b);
		Var operator * (const std::string b);
		Var operator * (const Var b);
		Var operator * (const Dice b);
		Var operator * (const Wallet b);
		Var operator * (const Currency b);
		Var operator * (const CurrencySystem b);
		Var operator / (const int b);
		Var operator / (const std::string b);
		Var operator / (const Var b);
		Var operator / (const Dice b);
		Var operator / (const Wallet b);
		Var operator / (const Currency b);
		Var operator / (const CurrencySystem b);
		Var operator ^ (const int b);
		Var operator ^ (const std::string b);
		Var operator ^ (const Var b);
		Var operator ^ (const Dice b);
		Var operator ^ (const Wallet b);
		Var operator ^ (const Currency b);
		Var operator ^ (const CurrencySystem b);
		Var operator % (const int b);
		Var operator % (const std::string b);
		Var operator % (const Var b);
		Var operator % (const Dice b);
		Var operator % (const Wallet b);
		Var operator % (const Currency b);
		Var operator % (const CurrencySystem b);
		bool operator == (const int b);
		bool operator == (const std::string b);
		bool operator == (const Var b);
		bool operator == (const Dice b);
		bool operator == ([[maybe_unsed]] const Wallet b);
		bool operator == ([[maybe_unsed]] const Currency b);
		bool operator == ([[maybe_unsed]] const CurrencySystem b);
		bool operator < (const int b);
		bool operator < (const std::string b);
		bool operator < (const Var b);
		bool operator < (const Dice b);
		bool operator < ([[maybe_unsed]] const Wallet b);
		bool operator < ([[maybe_unsed]] const Currency b);
		bool operator < ([[maybe_unsed]] const CurrencySystem b);
		bool operator > (const int b);
		bool operator > (const std::string b);
		bool operator > (const Var b);
		bool operator > (const Dice b);
		bool operator > ([[maybe_unsed]] const Wallet b);
		bool operator > ([[maybe_unsed]] const Currency b);
		bool operator > ([[maybe_unsed]] const CurrencySystem b);
		bool operator <= (const int b);
		bool operator <= (const std::string b);
		bool operator <= (const Var b);
		bool operator <= (const Dice b);
		bool operator <= (const Wallet b);
		bool operator <= (const Currency b);
		bool operator <= (const CurrencySystem b);
		bool operator >= (const int b);
		bool operator >= (const std::string b);
		bool operator >= (const Var b);
		bool operator >= (const Dice b);
		bool operator >= (const Wallet b);
		bool operator >= (const Currency b);
		bool operator >= (const CurrencySystem b);
		bool operator != (const int b);
		bool operator != (const std::string b);
		bool operator != (const Var b);
		bool operator != (const Dice b);
		bool operator != (const Wallet b);
		bool operator != (const Currency b);
		bool operator != (const CurrencySystem b);
		Var& operator ++ (int);
		Var& operator -- (int);


	Var();
	Var(std::string _value);
	Var(int _value);

	const char* c_str() const;
};
