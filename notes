TODO:

- Make variable saving/loading use variable syntax (and thus be loaded by literally calling "variables")
	- Probably will need to figure out how to suppress all the Info messages once new variable system loads a character.
	- Look into saving the posix_spawn() output to something so it can be used for regex replacement later
- Data types on variables
- Reference other character via @[some_other_char]/an/attr
- Caps-insensative variable reference
- Shorthand variable reference

@/Equipment/ += @[SomeShop]/Equipment/BagOfHolding/
	Adds BagOfHolding and everything downstream of it to @/Equipment

@/Equipment/ -= @/Equipment/BagOfHolding/
	Deletes BagOfHolding and everything downstream of it

- Delete previous character file when player changes name or runs 'setname'

- "roll" command
	- -L|--dice-lists: Print all files in dice-list

- "list" command
	- -d|--depth: Limit how many levels are listed
		- This should be relative to a root variable
			- e.g. "-d 2 -c [OptionalOtherCharacter]/Inventory"
				- Will list 2 levels down relative to @[OptionalOtherCharacter]/Inventory

- "history" command
	- No flags: dump all history
	- -f n: First n lines
	- -l n: Last n lines
	- n: Print nth line
	- Tie this into up arrow, down arrow, PgUp, and PgDown

- "help" command to list all commands
	- Give each program an "--appdescription" flag
		- Capture output of both and print a formatted list
			- try,catch block which will handle if the program doesn't have the flag
				- Print "Unknown" in yellow italics text for description

- "map" command for ncursesw map editor
	- Save in "campaigns/<current campaign>/maps/<map_name>.map
	-n New
	-l Load
	-d Delete
	- Arrow keys to move cursor
		- Shift+arrow: y++
		- Ctrl+arrow: y--
	- 'a' ADD character at position
	- 'd' DELETE character at position
	- ':' COMMAND mode
		- :b				Toggle bold
		- :i				Toggle italics
		- :bg r,g,b			Set background color
		- :bgf r,g,b			Background fill
		- :fg r,g,b			Set forground color
		- :fgf r,g,b			Foreground fill
		- :scu				Show window with a bunch of likely common unicode characters on the screen
		- :u code			Print <code> unicode character
		- :mc x,y,z			Move cursor to x,y,z coordinates
			- Allow for relative movements (x+1, y-2, etc.)
		- :mf x,y,z			Move foreground to x,y,z coordinates
			- Allow for relative movements (x+1, y-2, etc.)
		- :mb x,y,z			Move background to x,y,z coordinates
			- Allow for relative movements (x+1, y-2, etc.)
		- :clear			Completely clear screen
		- :l <variable>			LINK to <variable>
		- :l <variable> as <string>	LINK <variable> and have it labeled under <string>
		- :w				Save map (default: mapX, where X is a number that increases until an unused name is found)
			- Warn player if override
		- :w <name>			Save map as <name>
			- Warn player if override
		- :q				Quit map program
		- :wq				Save and quit
		- :d				Deletes current map (buffer will still exist)
			- Warn player for confirmation
		- :d <name>			Deletes map <name>
			- Warn player for confirmation

		- Create list of common colors that could be used in place of r,g,b
			- Built-in eight terminal colors
			- Add the 140 W3C-supported HTML names via a ard-coded map of std::pair<std::string,color_t>
				- color_t will be a struct that contans r,g,b as unsigned ints due to curses color channels being 0-1000 instead of 0-255
					- color_t will need to therefore convert 256 levels per channel to 1001 levels per channel (1:3.91015625 ratio)
						- e.g. map_colors["Olive"] = color_t(128,128,0);
	- '/' SEARCH
		- Probably going to be more basic that actual Vim search
		- Regex library may allow for a good cop-out

- "edit" command to allow more intuitive data entry of longer string variables for things like descriptions

- "load" command to load character or campaign
	-c Character
	-m Campaign

- "new" command to create character or campaign
	-c Character
	-m Campaign

- "pdfload" and "pdfsave" commands to handle PDF reading and writing

- "del" command to delete variables, characters, or campaigns
	-v Variable
		c Character attribute
		m Campaign variable
		s Shell variable
	-c Character
	-m Campaign

- "prompt" command to load different prompts
	- Loads from "prompts/<prompt_name>"
	- Potentially expand the text formatting code to apply to variables as well
